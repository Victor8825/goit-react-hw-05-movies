{"version":3,"file":"static/js/720.f6310c0f.chunk.js","mappings":"0OAEaA,E,QAAaC,GAAAA,GAAH,iFAIN,qBAAGC,MAAkBC,UAAUC,EAA/B,I,SC6BjB,EA7Ba,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcN,GAASO,MAAK,SAAAC,GAAQ,OAAIJ,EAAUI,EAAd,GACrC,GAAE,CAACR,IAGJ,OACE,SAACL,EAAD,UACGQ,EAAOM,KAAI,gBAAiBC,EAAjB,EAAGC,aAAsBC,EAAzB,EAAyBA,KAAMC,EAA/B,EAA+BA,UAAWC,EAA1C,EAA0CA,QAA1C,OACV,2BACE,gBACEC,IAAG,UAAKL,EAASM,EAAAA,GAAeN,EAN5B,wDAOJO,IAAKL,EACLM,MAAM,MACNC,OAAO,SAET,wBACE,uBAAIP,OAEN,uCAAeC,OAVRC,EADC,KAgBjB,C,8OC9BKM,EAAU,mCACHJ,EAAe,kCACtBK,EAAW,+BACXC,EAAS,UAAMD,EAAN,wCAA8CD,EAA9C,mBACTG,EAAM,UAAMF,EAAN,WACNG,EAAmB,UAAMH,EAAN,iCAAuCD,EAAvC,8CAEZK,EAAmB,mCAAG,6GAERC,IAAAA,IAAA,UAAaJ,IAFL,cAEzBd,EAFyB,yBAGxBA,EAASmB,KAAKC,SAHU,0DAKxBC,EAAAA,EAAAA,GAAa,KAAMC,UALK,yDAAH,qDASnBC,EAAc,mCAAG,WAAM/B,GAAN,gGAEH0B,IAAAA,IAAA,UAClBH,GADkB,OACTvB,EADS,oBACUoB,EADV,oBAFG,cAEpBZ,EAFoB,yBAKnBA,EAASmB,MALU,0DAOnBE,EAAAA,EAAAA,GAAa,KAAMC,UAPA,yDAAH,sDAWdE,EAAiB,mCAAG,WAAMC,GAAN,gGAENP,IAAAA,IAAA,UAAaF,EAAb,kBAA0CS,IAFpC,cAEvBzB,EAFuB,yBAGtBA,EAASmB,KAAKC,SAHQ,0DAKtBC,EAAAA,EAAAA,GAAa,KAAMC,UALG,yDAAH,sDASjBI,EAAY,mCAAG,WAAMlC,GAAN,gGAED0B,IAAAA,IAAA,UAClBH,GADkB,OACTvB,EADS,4BACkBoB,EADlB,2BAFC,cAElBZ,EAFkB,yBAKjBA,EAASmB,KAAKC,SALG,0DAOjBC,EAAAA,EAAAA,GAAa,KAAMC,UAPF,yDAAH,sDAWZxB,EAAa,mCAAG,WAAMN,GAAN,gGAEF0B,IAAAA,IAAA,UAClBH,GADkB,OACTvB,EADS,4BACkBoB,EADlB,oBAFE,cAEnBZ,EAFmB,yBAKlBA,EAASmB,KAAKQ,MALI,0DAOlBN,EAAAA,EAAAA,GAAa,KAAMC,UAPD,yDAAH,qD,qEC/CbD,G,QAAe,SAAAO,GAC1BC,EAAAA,GAAAA,KAAWD,EAAa,CACtBE,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAEb,E","sources":["components/Cast/StyledCast.js","components/Cast/Cast.js","components/Utils/fetchMovies.js","components/Utils/notification.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledCast = styled.ul`\n  list-style: none;\n\n  li {\n    font-size: ${({ theme }) => theme.fontSizes.sm};\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastInfo } from 'components/Utils/fetchMovies';\nimport { BASE_IMG_URL } from 'components/Utils/fetchMovies';\nimport { StyledCast } from './StyledCast';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    fetchCastInfo(movieId).then(response => setActors(response));\n  }, [movieId]);\n\n  const dummyImg = `https://dummyimage.com/100x200/000/fff&text=NO+IMAGE`;\n  return (\n    <StyledCast>\n      {actors.map(({ profile_path: poster, name, character, cast_id }) => (\n        <li key={cast_id}>\n          <img\n            src={`${poster ? BASE_IMG_URL + poster : dummyImg}`}\n            alt={name}\n            width=\"100\"\n            height=\"200\"\n          />\n          <p>\n            <b>{name}</b>\n          </p>\n          <p>Character: {character}</p>\n        </li>\n      ))}\n    </StyledCast>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { notification } from './notification';\n\nconst API_KEY = '03358da3f30e688045791f6e219334d0';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TREND_URL = `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&language=en-US`;\nconst ID_URL = `${BASE_URL}/movie/`;\nconst SEARCH_BY_QUERY_URL = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${TREND_URL}`);\n    return response.data.results;\n  } catch (error) {\n    return notification(error.message);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const response = await axios.get(\n      `${ID_URL}${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    return notification(error.message);\n  }\n};\n\nexport const fetchMovieByInput = async query => {\n  try {\n    const response = await axios.get(`${SEARCH_BY_QUERY_URL}&query=${query}`);\n    return response.data.results;\n  } catch (error) {\n    return notification(error.message);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${ID_URL}${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    return notification(error.message);\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    const response = await axios.get(\n      `${ID_URL}${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    return notification(error.message);\n  }\n};\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const notification = textMessage => {\n  toast.warn(textMessage, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n"],"names":["StyledCast","styled","theme","fontSizes","sm","movieId","useParams","useState","actors","setActors","useEffect","fetchCastInfo","then","response","map","poster","profile_path","name","character","cast_id","src","BASE_IMG_URL","alt","width","height","API_KEY","BASE_URL","TREND_URL","ID_URL","SEARCH_BY_QUERY_URL","fetchTrendingMovies","axios","data","results","notification","message","fetchMovieById","fetchMovieByInput","query","fetchReviews","cast","textMessage","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined"],"sourceRoot":""}